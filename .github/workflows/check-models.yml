name: Check for New OpenAI Models

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    # Add permissions for GitHub Actions
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        # Make sure we have full git history for proper push
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.0.0
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
        
    - name: Update lock file and install dependencies
      run: |
        # Update the lock file to match pyproject.toml changes
        poetry lock
        # Install dependencies
        poetry install
    
    - name: Verify API key
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ ERROR: OPENAI_API_KEY is not set in repository secrets"
          exit 1
        fi
      
    - name: Check and update models
      id: check_models
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Add diagnostic logging to trace the 'format' error
        echo "Checking API key format:"
        if [[ ! "$OPENAI_API_KEY" =~ ^sk- ]]; then
          echo "WARNING: API key doesn't start with 'sk-' which is required by OpenAI"
        else
          echo "API key format appears correct (starts with sk-)"
        fi
        
        # Check for Python/dependencies issues
        echo "Python version: $(python --version)"
        echo "Poetry version: $(poetry --version)"
        echo "Running list command first to check for basic functionality:"
        if poetry run openai_model_tracker list; then
          echo "List command successful"
        else
          echo "List command failed, indicating a potential issue with the code or dependencies"
        fi
        
        # Check if the config file exists and is valid JSON
        echo "Checking config file:"
        if [ -f "openai_models.json" ]; then
          if python -c "import json; json.load(open('openai_models.json'))"; then
            echo "Config file exists and is valid JSON"
          else
            echo "WARNING: Config file exists but is not valid JSON"
          fi
        else
          echo "Config file doesn't exist yet"
        fi
        
        echo "Running update command with extra debugging:"
        # Try to run with exception details
        poetry run python -c "import traceback; import sys; from openai_model_tracker.__main__ import update_models_config; try: update_models_config(verbose=True); except Exception as e: print(f'ERROR: {str(e)}', file=sys.stderr); traceback.print_exc(); sys.exit(1)"
        
        # Check specifically for changes to openai_models.json, not just any file
        if [ -n "$(git status --porcelain openai_models.json)" ]; then
          echo "changes_detected=true" >> $GITHUB_OUTPUT
        else
          echo "changes_detected=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check_models.outputs.changes_detected == 'true'
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add openai_models.json
        
        # Only proceed if there are actually staged changes
        if [ -n "$(git diff --cached --name-only)" ]; then
          git commit -m "Auto-update: Found new OpenAI models"
          git push
        fi
    
    - name: No changes
      if: steps.check_models.outputs.changes_detected == 'false'
      run: |
        echo "No new models found, no changes to commit."

name: Check for New OpenAI Models

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  # Allow manual trigger
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    # Add permissions for GitHub Actions
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        # Make sure we have full git history for proper push
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install and configure Poetry
      run: |
        python -m pip install poetry==2.0.0
        python -m poetry config virtualenvs.in-project true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-venv-
        
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Check for new models and commit changes
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PYTHONUNBUFFERED: "1"
      run: |
        # Enable command echoing for debugging
        set -x
        
        # Verify API key
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ ERROR: OPENAI_API_KEY is not set in repository secrets"
          exit 1
        fi
        echo "✅ API key is properly set"
        
        # Create a direct script that bypasses the CLI interface
        echo "Creating direct Python script for checking models..."
        cat > check_models.py << 'EOF'
import json
import os
import sys
import requests
from datetime import datetime

# Configuration file path
CONFIG_PATH = "openai_models.json"

def get_openai_models():
    """Query the OpenAI API for available models."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("ERROR: OPENAI_API_KEY environment variable is not set or empty")
        return None

    print(f"Sending request to OpenAI API")
    headers = {"Authorization": f"Bearer {api_key}"}

    try:
        response = requests.get(
            "https://api.openai.com/v1/models",
            headers=headers,
            timeout=30
        )
        response.raise_for_status()
    except Exception as e:
        print(f"Error accessing OpenAI API: {str(e)}")
        return None

    return response.json()

def load_config():
    """Load the existing configuration file."""
    if os.path.exists(CONFIG_PATH):
        try:
            with open(CONFIG_PATH, "r") as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading config file: {str(e)}")
            return {"models": []}
    return {"models": []}

def save_config(config):
    """Save the updated configuration to file."""
    # Sort models by api_created date (oldest first)
    config["models"] = sorted(config["models"], key=lambda x: x["api_created"])
    
    try:
        with open(CONFIG_PATH, "w") as f:
            json.dump(config, f, indent=2)
        return True
    except Exception as e:
        print(f"Error saving config file: {str(e)}")
        return False

def main():
    print("Starting model check...")
    
    # Get models from API
    api_response = get_openai_models()
    if not api_response:
        print("Failed to get models from OpenAI API")
        sys.exit(1)
    
    # Load existing config
    config = load_config()
    
    # Create a set of existing model IDs for efficient lookup
    existing_model_ids = {model["id"] for model in config["models"]}
    print(f"Found {len(existing_model_ids)} existing models in config")
    
    # Check for new models
    new_models = []
    for model in api_response["data"]:
        if model["id"] not in existing_model_ids:
            # This is a new model
            model_date = datetime.fromtimestamp(model["created"]).strftime(
                "%Y-%m-%d %H:%M:%S"
            )
            print(f"New model discovered: {model['id']} (created: {model_date})")
            new_models.append({"id": model["id"], "api_created": model["created"]})
    
    # Report findings
    if new_models:
        print(f"\nFound {len(new_models)} new models that are not in the config file.")
        
        # Add new models to config
        for model in new_models:
            config["models"].append(model)
        
        # Save updated config
        if save_config(config):
            print(f"Added {len(new_models)} new models to the config file.")
            return True
        else:
            print("Failed to save config file")
            return False
    else:
        print("No new models found.")
        return False

if __name__ == "__main__":
    updated = main()
    sys.exit(0)  # Always exit with success for now
EOF
        
        # Run the direct Python script
        echo "Running direct Python script..."
        poetry run python check_models.py
        
        # Check if there are changes to commit (using explicit git command)
        echo "Checking for changes in repository..."
        GIT_STATUS=$(git status --porcelain)
        echo "Git status output: $GIT_STATUS"
        
        if [ -n "$GIT_STATUS" ]; then
          echo "Changes detected in the models file, committing and pushing..."
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add openai_models.json
          git commit -m "Auto-update: Found new OpenAI models"
          
          # Try to push changes
          if git push; then
            echo "✅ Successfully pushed changes to the repository!"
          else
            echo "❌ Failed to push changes. Check if the workflow has proper permissions."
            echo "   You can set them in Settings -> Actions -> General -> Workflow permissions"
            exit 1
          fi
        else
          echo "No new models found, no changes to commit."
        fi
